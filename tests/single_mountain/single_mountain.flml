<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">single_mountain</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">fluids</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="vbox">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">1</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>discontinuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <mesh name="PressureMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <mesh_continuity>
          <string_value>continuous</string_value>
        </mesh_continuity>
        <stat>
          <exclude_from_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">200.0</real_value>
      </constant>
    </dump_period>
    <output_mesh name="PressureMesh"/>
    <stat/>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">2.3</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">1800.0</real_value>
    </finish_time>
    <nonlinear_iterations>
      <integer_value rank="0">2</integer_value>
      <tolerance>
        <real_value rank="0">1.E-9</real_value>
        <l2_norm/>
      </tolerance>
    </nonlinear_iterations>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">9.81</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value shape="2" dim1="dim" rank="1">0.0 -1.0</real_value>
            </constant>
          </value>
          <output/>
          <stat>
            <include_in_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="Gas">
    <equation_of_state>
      <compressible>
        <giraldo>
          <reference_pressure>
            <real_value rank="0">100000</real_value>
          </reference_pressure>
          <C_P>
            <real_value rank="0">1004.64</real_value>
          </C_P>
          <C_V>
            <real_value rank="0">717.6</real_value>
          </C_V>
          <constant_cp_cv/>
        </giraldo>
        <subtract_out_reference_profile/>
      </compressible>
    </equation_of_state>
    <scalar_field name="Pressure" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method/>
        </scheme>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1004.64
  cv=717.6
  R=cp-cv
  theta0=280.
  N2=1.e-4
  g=9.81
  expres=1+g*g/(cp*theta0*N2)*(exp(-N2/g*X[1]) - 1.)
  
  pressure=p0*expres**(cp/R)
  return pressure</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="in_left">
          <surface_ids>
            <integer_value shape="1" rank="1">100</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1004.64
  cv=717.6
  R=cp-cv
  theta0=280.
  N2=1.e-4
  g=9.81
  expres=1+g*g/(cp*theta0*N2)*(exp(-N2/g*X[1]) - 1.)
  
  pressure=p0*expres**(cp/R)
  return pressure</string_value>
            </python>
          </type>
        </boundary_conditions>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <galerkin_projection>
          <continuous>
            <solver>
              <iterative_method name="gmres">
                <restart>
                  <integer_value rank="0">30</integer_value>
                </restart>
              </iterative_method>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.e-7</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </continuous>
        </galerkin_projection>
      </prognostic>
    </scalar_field>
    <scalar_field name="Density" rank="0">
      <prognostic>
        <mesh name="PressureMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <advection_terms>
              <integrate_advection_by_parts/>
            </advection_terms>
            <mass_terms/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.55</real_value>
          </theta>
        </temporal_discretisation>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1004.64
  cv=717.6
  R=cp-cv
  theta0=280.
  N2=1.e-4
  g=9.81
  expres=1+g*g/(cp*theta0*N2)*(exp(-N2/g*X[1]) - 1.)
  theta=theta0*exp(N2/g*X[1])
  
  density=p0*expres**(cv/R)*1.0/(R*theta)
  return density</string_value>
          </python>
        </initial_condition>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <vector_field name="Velocity" rank="1">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <viscosity_scheme>
              <compact_discontinuous_galerkin/>
              <tensor_form/>
            </viscosity_scheme>
            <advection_scheme>
              <upwind/>
              <project_velocity_to_continuous>
                <mesh name="CoordinateMesh"/>
              </project_velocity_to_continuous>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <buoyancy/>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.55</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">0.55</real_value>
          </relaxation>
          <discontinuous_galerkin>
            <maximum_courant_number_per_subcycle>
              <real_value rank="0">0.2</real_value>
            </maximum_courant_number_per_subcycle>
          </discontinuous_galerkin>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value shape="2" dim1="dim" rank="1">10.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="in_left">
          <surface_ids>
            <integer_value shape="1" rank="1">100</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">10.</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="surface">
          <surface_ids>
            <integer_value shape="1" rank="1">97</integer_value>
          </surface_ids>
          <type name="no_normal_flow"/>
        </boundary_conditions>
        <boundary_conditions name="top">
          <surface_ids>
            <integer_value shape="1" rank="1">99</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <y_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <vector_field name="Absorption" rank="1">
          <diagnostic>
            <algorithm name="atmosphere_forcing_vector">
              <constant>
                <real_value shape="2" dim1="dim" rank="1">10 0</real_value>
              </constant>
              <sponge_layer_velocity_absorption>
                <coefficient>
                  <real_value rank="0">0.25</real_value>
                </coefficient>
                <z_sponge>
                  <real_value rank="0">17000</real_value>
                </z_sponge>
                <x_sponge_left>
                  <real_value rank="0">-60000</real_value>
                </x_sponge_left>
                <x_sponge_right>
                  <real_value rank="0">60000</real_value>
                </x_sponge_right>
              </sponge_layer_velocity_absorption>
            </algorithm>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <convergence>
              <include_in_convergence/>
            </convergence>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <steady_state>
              <include_in_steady_state/>
            </steady_state>
          </diagnostic>
          <default_absorption/>
        </vector_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <galerkin_projection>
          <discontinuous/>
        </galerkin_projection>
      </prognostic>
    </vector_field>
    <scalar_field name="HydrostaticReferencePressure" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1004.64
  cv=717.6
  R=cp-cv
  theta0=280.
  N2=1.e-4
  g=9.81
  expres=1+g*g/(cp*theta0*N2)*(exp(-N2/g*X[1]) - 1.)
    
  pressure=p0*expres**(cp/R)
  return pressure</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <galerkin_projection>
          <discontinuous/>
        </galerkin_projection>
      </prescribed>
    </scalar_field>
    <scalar_field name="HydrostaticReferenceDensity" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1004.64
  cv=717.6
  R=cp-cv
  theta0=280.
  N2=1.e-4
  g=9.81
  expres=1+g*g/(cp*theta0*N2)*(exp(-N2/g*X[1]) - 1.)
  theta=theta0*exp(N2/g*X[1])
  
  density=p0*expres**(cv/R)*1.0/(R*theta)
  return density</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <galerkin_projection>
          <discontinuous/>
        </galerkin_projection>
      </prescribed>
    </scalar_field>
    <scalar_field name="PotentialTempPert" rank="0">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value lines="20" type="code" language="python">y=state.scalar_fields["ycoord"]
pottem=state.scalar_fields["PotentialTemperature"]
hspottem=state.scalar_fields["HydrostaticPotentialTemp"]

from math import sqrt, sin, cos, atan2, acos, asin, pi, exp
from numpy import *

pt_pert=zeros(field.node_count)


for n in range(field.node_count):
  pt=pottem.node_val(n)
  hpt=hspottem.node_val(n)
  pt_pert[n] = pt-hpt

for n in range(field.node_count):
  field.set(n,pt_pert[n])</string_value>
        </algorithm>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <galerkin_projection>
          <discontinuous/>
        </galerkin_projection>
      </diagnostic>
    </scalar_field>
    <scalar_field name="ycoord" rank="0">
      <prescribed>
        <mesh name="PressureMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
    y=X[1]
    return y</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <consistent_interpolation/>
      </prescribed>
    </scalar_field>
    <scalar_field name="density_pert" rank="0">
      <diagnostic>
        <algorithm source_field_2_type="scalar" name="scalar_difference" source_field_1_name="Density" source_field_2_name="HydrostaticReferenceDensity" material_phase_support="single" source_field_1_type="scalar"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="PressurePert" rank="0">
      <diagnostic>
        <algorithm source_field_2_type="scalar" name="scalar_difference" source_field_1_name="Pressure" source_field_2_name="HydrostaticReferencePressure" material_phase_support="single" source_field_1_type="scalar"/>
        <mesh name="PressureMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field name="HydrostaticPotentialTemp" rank="0">
      <prescribed>
        <mesh name="VelocityMesh"/>
        <value name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1004.64
  cv=717.6
  R=cp-cv
  theta0=280.
  N2=1.e-4
  g=9.81
  expres=1+g*g/(cp*theta0*N2)*(exp(-N2/g*X[1]) - 1.)
  theta=theta0*exp(N2/g*X[1])
  
  return theta</string_value>
          </python>
        </value>
        <output/>
        <stat/>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <consistent_interpolation/>
      </prescribed>
    </scalar_field>
    <scalar_field name="PotentialTemperature" rank="0">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <discontinuous_galerkin>
            <advection_scheme>
              <upwind/>
              <project_velocity_to_continuous>
                <mesh name="CoordinateMesh"/>
              </project_velocity_to_continuous>
              <integrate_advection_by_parts>
                <twice/>
              </integrate_advection_by_parts>
            </advection_scheme>
            <diffusion_scheme>
              <compact_discontinuous_galerkin/>
            </diffusion_scheme>
          </discontinuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0.</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.55</real_value>
          </theta>
          <discontinuous_galerkin>
            <maximum_courant_number_per_subcycle>
              <real_value rank="0">0.2</real_value>
            </maximum_courant_number_per_subcycle>
          </discontinuous_galerkin>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="eisenstat"/>
          <relative_error>
            <real_value rank="0">1.e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1004.64
  cv=717.6
  R=cp-cv
  theta0=280.
  N2=1.e-4
  g=9.81
  expres=1+g*g/(cp*theta0*N2)*(exp(-N2/g*X[1]) - 1.)
  theta=theta0*exp(N2/g*X[1])
  
  return theta</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="in_left">
          <surface_ids>
            <integer_value shape="1" rank="1">100</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1004.64
  cv=717.6
  R=cp-cv
  theta0=280.
  N2=1.e-4
  g=9.81
  expres=1+g*g/(cp*theta0*N2)*(exp(-N2/g*X[1]) - 1.)
  theta=theta0*exp(N2/g*X[1])
  
  return theta</string_value>
            </python>
          </type>
        </boundary_conditions>
        <scalar_field type="Absorptions" name="Absorption" rank="0">
          <diagnostic>
            <algorithm name="atmosphere_forcing_scalar">
              <python>
                <string_value lines="20" type="code" language="python">def val(X, t):
  from math import exp, sqrt, sin, cos, pi
  p0=1.0e5
  cp=1004.64
  cv=717.6
  R=cp-cv
  theta0=280.
  N2=1.e-4
  g=9.81
  expres=1+g*g/(cp*theta0*N2)*(exp(-N2/g*X[1]) - 1.)
  theta=theta0*exp(N2/g*X[1])
  
  return theta</string_value>
              </python>
              <sponge_layer_scalar_absorption>
                <coefficient>
                  <real_value rank="0">0.15</real_value>
                </coefficient>
                <z_sponge>
                  <real_value rank="0">17000</real_value>
                </z_sponge>
                <x_sponge_left>
                  <real_value rank="0">-60000</real_value>
                </x_sponge_left>
                <x_sponge_right>
                  <real_value rank="0">60000</real_value>
                </x_sponge_right>
              </sponge_layer_scalar_absorption>
            </algorithm>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
          </diagnostic>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <galerkin_projection>
          <discontinuous/>
        </galerkin_projection>
      </prognostic>
    </scalar_field>
    <scalar_field name="DG_CourantNumber" rank="0">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
</fluidity_options>
